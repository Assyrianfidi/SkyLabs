var J=Object.defineProperty;var X=(o,t)=>{for(var e in t)J(o,e,{get:t[e],enumerable:!0})};import T from"express";import De from"cors";import Re from"helmet";import ke from"express-rate-limit";import{createServer as le}from"http";import{Router as K}from"express";import{Pool as Q}from"pg";import{z as g}from"zod";import{validateRequest as Y}from"zod-express-middleware";import Z from"express-rate-limit";import"dotenv/config";var ee=g.object({name:g.string().min(2,"Name must be at least 2 characters"),email:g.string().email("Please enter a valid email"),phone:g.string().optional(),message:g.string().min(10,"Message must be at least 10 characters"),website:g.string().optional()}),D=K(),te=Z({windowMs:60*1e3,max:process.env.NODE_ENV==="test"?100:5,standardHeaders:!0,legacyHeaders:!1,message:{success:!1,error:"Too many requests, please try again later."}}),R=new Q({user:process.env.DB_USER||"skylabs",host:process.env.DB_HOST||"localhost",database:process.env.DB_NAME||"skylabs_dev",password:process.env.DB_PASSWORD||"skylabs",port:parseInt(process.env.DB_PORT||"5432")});R.query("SELECT NOW()",o=>{o?console.error("\u274C Database connection error:",o):console.log("\u2705 Connected to PostgreSQL database")});D.post("/",te,Y({body:ee}),async(o,t)=>{let e=await R.connect();try{let{name:r,email:a,phone:s,message:c,website:l}=o.body;if(l&&l.trim().length>0)return console.log("Spam detected - honeypot field filled"),t.status(200).json({success:!0,message:"Thank you for your message!"});await e.query("BEGIN");let i=await e.query("INSERT INTO contacts (name, email, phone, message, created_at) VALUES ($1, $2, $3, $4, NOW()) RETURNING *",[r,a,s||null,c]);await e.query("COMMIT");let m=i.rows[0];return t.status(201).json({success:!0,data:m,message:"Your message has been sent successfully!"})}catch(r){return await e.query("ROLLBACK"),console.error("Error submitting contact form:",r),r instanceof Error&&r.message.includes("duplicate key value")?t.status(400).json({success:!1,error:"A message with these details already exists"}):t.status(500).json({success:!1,error:"Failed to submit contact form. Please try again later."})}finally{e.release()}});var k=D;import{drizzle as ae}from"drizzle-orm/node-postgres";import{Pool as ne}from"pg";var v={};X(v,{contacts:()=>N,insertContactSchema:()=>se,insertUserSchema:()=>re,users:()=>O});import{sql as x}from"drizzle-orm";import{pgTable as I,text as h,varchar as M,timestamp as oe}from"drizzle-orm/pg-core";import{createInsertSchema as $}from"drizzle-zod";var O=I("users",{id:M("id").primaryKey().default(x`gen_random_uuid()`),username:h("username").notNull().unique(),password:h("password").notNull()}),N=I("contacts",{id:M("id").primaryKey().default(x`gen_random_uuid()`),name:h("name").notNull(),email:h("email").notNull(),phone:h("phone"),message:h("message").notNull(),createdAt:oe("created_at").defaultNow().notNull()}),re=$(O).pick({username:!0,password:!0}),se=$(N).omit({id:!0,createdAt:!0});import"dotenv/config";import{promises as P}from"fs";import A from"path";async function E(o,t="",e="Database",r="\u{1F534} Critical",a={},s){let c=new Date().toISOString(),l=ie(o),i=`### ${c} - ${t}

- **Category:** ${e}
- **Severity:** ${r}
- **Error Message:** \`${o.message}\`
- **Fix Suggestion:** ${l}
- **Status:** \u{1F504} Pending
- **Stack Trace:** \`\`\`
${o.stack||"No stack trace available"}\`\`\`
- **Metadata:** \`\`\`json
${JSON.stringify(a,null,2)}\`\`\`
${s?`- **Linked Task:** [${s}](${A.join(process.cwd(),"TODO.md")}#${s.toLowerCase().replace(/\s+/g,"-")})
`:""}---
`;try{let m=A.join(process.cwd(),"ERROR_LOG.md"),f=await P.readFile(m,"utf-8").catch(()=>"");await P.writeFile(m,i+f)}catch(m){console.error("\u274C Failed to write to error log:",m)}process.env.NODE_ENV!=="production"&&(console.error(`[${r}] ${e}: ${o.message}`),Object.keys(a).length>0&&console.error("Metadata:",a))}var n={maxRetries:5,retryDelay:5e3,maxConnections:10,connectionTimeout:1e4,user:process.env.DB_USER||"postgres",password:process.env.DB_PASSWORD||"",host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432"),database:process.env.DB_NAME||"skylabs_dev",ssl:process.env.NODE_ENV==="production"?{rejectUnauthorized:!1}:!1};console.log("\u{1F4CB} Database Configuration:",{...n,password:n.password?"***":"(no password)",ssl:n.ssl?"enabled":"disabled"});function ie(o){return o.message.includes("DATABASE_URL")?"Check if .env file exists and contains a valid DATABASE_URL. See .env.example for format.":o.message.includes("connection refused")?"Verify PostgreSQL is running and accessible. Check host, port, and credentials.":"Check database configuration and network connectivity."}async function ce(){if(!n.user||!n.password||!n.database)throw new Error("Database configuration is incomplete. Check your .env file");let o=null,t=0,e=n.maxRetries,r=n.retryDelay;for(;t<e;){t++;try{console.log(`\u{1F50C} Connecting to database (attempt ${t}/${e})...`),console.log(`Connecting to: postgresql://${n.user}@${n.host}:${n.port}/${n.database}`);let s=new ne({user:n.user,password:n.password,host:n.host,port:n.port,database:n.database,ssl:n.ssl||!1,max:n.maxConnections,idleTimeoutMillis:2e4,connectionTimeoutMillis:n.connectionTimeout,application_name:"skylabs-api"}),c=await s.connect();try{await c.query("SELECT 1"),console.log("\u2705 Database connection successful")}finally{c.release()}return{db:ae(s,{schema:v}),pool:s}}catch(s){let c=s;if(o=c,console.error(`\u274C Database connection failed (attempt ${t}/${e}):`,c.message),await E(c,"Database Connection Failed","Database","\u{1F534} Critical",{attempt:t,maxAttempts:e,host:n.host,port:n.port,database:n.database,user:n.user,hasPassword:!!n.password,errorCode:s.code},"db_connection"),t>=e){let m={message:`Failed to connect to database after ${e} attempts`,originalError:c.message,errorCode:s.code,connectionDetails:{host:n.host,port:n.port,database:n.database,user:n.user},suggestion:"Check if PostgreSQL is running and the credentials are correct."};throw console.error("Connection details:",JSON.stringify(m,null,2)),new Error(JSON.stringify(m,null,2))}let l=Math.random()*.5+.75,i=Math.min(r*Math.pow(2,t-1)*l,3e4);console.log(`\u23F3 Retrying in ${Math.round(i)}ms...`),await new Promise(m=>setTimeout(m,i))}}let a=`Failed to connect to database after ${n.maxRetries} attempts: ${o?.message}`;throw console.error(`\u274C ${a}`),await E(new Error(a),"Database Connection Failed","Database","\u{1F534} Critical",{maxRetries:n.maxRetries,lastError:o?.message,errorCode:o?.code,stack:o?.stack},"db_connection_failed"),new Error(a)}var p=null,d=null,z=!1,_=null;async function L(){if(z&&p&&d)return{db:p,pool:d};_&&console.warn("\u26A0\uFE0F Database initialization previously failed, retrying...");try{d&&(await d.end(),d=null,p=null),console.log("\u{1F50C} Initializing database connection...");let o=await ce();return p=o.db,d=o.pool,z=!0,_=null,d.on("error",t=>{console.error("\u274C Unexpected error on idle client",t),E(t,"Database Connection Error","Database","\u{1F534} Critical",{timestamp:new Date().toISOString()},"db_connection_error")}),console.log("\u{1F517} Database connection pool ready"),console.log("\u2705 Database connection initialized successfully"),{db:p,pool:d}}catch(o){let t=o;throw _=t,await E(t,"Database Initialization Failed","Database","\u{1F534} Critical",{error:t.message,stack:t.stack,timestamp:new Date().toISOString()},"db_connection"),console.error("\u274C Failed to initialize database:",t.message),new Error(`Database initialization failed: ${t.message}`)}}process.on("SIGTERM",async()=>{console.log("\u{1F6D1} Received SIGTERM. Closing database connections..."),sql&&(await sql.end(),console.log("\u2705 Database connections closed")),process.exit(0)});process.on("SIGINT",async()=>{console.log("\u{1F6D1} Received SIGINT. Closing database connections..."),sql&&(await sql.end(),console.log("\u2705 Database connections closed")),process.exit(0)});async function F(o){return o.use("/api/contact",k),o.get("/api/contacts",async(e,r)=>{try{if(!p)throw new Error("Database connection not available");let a=await p.query.contacts.findMany();r.json(a)}catch(a){console.error("Get contacts error:",a),r.status(500).json({success:!1,message:"Failed to retrieve contacts."})}}),le(o)}import pe from"express";import j from"fs";import S from"path";import{createServer as ge,createLogger as he}from"vite";import{defineConfig as me}from"vite";import ue from"@vitejs/plugin-react";import y from"path";import de from"@replit/vite-plugin-runtime-error-modal";var U=me({plugins:[ue(),de(),...process.env.NODE_ENV!=="production"&&process.env.REPL_ID!==void 0?[await import("@replit/vite-plugin-cartographer").then(o=>o.cartographer())]:[]],define:{"import.meta.env.VITE_NEXT_PUBLIC_RECAPTCHA_SITE_KEY":JSON.stringify(process.env.VITE_NEXT_PUBLIC_RECAPTCHA_SITE_KEY||"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"),"import.meta.env.VITE_NEXT_PUBLIC_CONTACT_EMAIL":JSON.stringify(process.env.VITE_NEXT_PUBLIC_CONTACT_EMAIL||"contact@skylabs.dev")},server:{hmr:{overlay:!1},watch:{usePolling:!0},fs:{strict:!0,deny:["**/.*"]}},resolve:{alias:{"@":y.resolve(import.meta.dirname,"client","src"),"@shared":y.resolve(import.meta.dirname,"shared"),"@assets":y.resolve(import.meta.dirname,"attached_assets")}},root:y.resolve(import.meta.dirname,"client"),build:{outDir:y.resolve(import.meta.dirname,"dist/public"),emptyOutDir:!0}});import{nanoid as fe}from"nanoid";var q=he();function H(o,t="express"){let e=new Date().toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0});console.log(`${e} [${t}] ${o}`)}async function B(o,t){let e={middlewareMode:!0,hmr:{server:t},allowedHosts:!0},r=await ge({...U,configFile:!1,customLogger:{...q,error:(a,s)=>{q.error(a,s),process.exit(1)}},server:e,appType:"custom"});o.use(r.middlewares),o.use("*",async(a,s,c)=>{let l=a.originalUrl;try{let i=S.resolve(import.meta.dirname,"..","client","index.html"),m=await j.promises.readFile(i,"utf-8");m=m.replace('src="/src/main.tsx"',`src="/src/main.tsx?v=${fe()}"`);let f=await r.transformIndexHtml(l,m);s.status(200).set({"Content-Type":"text/html"}).end(f)}catch(i){r.ssrFixStacktrace(i),c(i)}})}function V(o){let t=S.resolve(import.meta.dirname,"public");if(!j.existsSync(t))throw new Error(`Could not find the build directory: ${t}, make sure to build the client first`);o.use(pe.static(t)),o.use("*",(e,r)=>{r.sendFile(S.resolve(t,"index.html"))})}import{writeFile as G,access as ye,constants as be}from"fs/promises";import{join as W,dirname as Ee}from"path";import{fileURLToPath as we}from"url";import{format as ve}from"date-fns";var _e=we(import.meta.url),Se=Ee(_e);async function b(o,t="Application",e="General",r="\u{1F534} Critical",a={},s){try{let c=new Date,l=`err-${c.getTime()}-${Math.random().toString(36).substr(2,5)}`,i={id:l,timestamp:c.toISOString(),category:e,severity:r,context:t,message:typeof o=="string"?o:o.message,...typeof o!="string"&&o.stack?{stack:o.stack}:{},...s?{taskId:s}:{},...a?{metadata:a}:{}},m=`
## ${r} ${e} Error (${ve(c,"yyyy-MM-dd HH:mm:ss")})
**ID:** \`${l}\`  
**Context:** ${t}  
**Task:** ${s?`[#${s}](./TODO.md#${s})`:"N/A"}

### Details
\`\`\`json
${JSON.stringify({message:i.message,...i.metadata?{metadata:i.metadata}:{}},null,2)}
\`\`\`

${i.stack?`### Stack Trace
\`\`\`
${i.stack}
\`\`\`
`:""}
---
`;return await G(W(Se,"..","..","ERROR_LOG.md"),m,{flag:"a"}),s&&await Ce(s,i),l}catch(c){return console.error("Failed to write to error log:",c),"error-log-failed"}}async function Ce(o,t){try{let e=W(process.cwd(),"TODO.md");console.log(`[TODO] Would update task ${o} with status: ${t.severity||"info"}`);try{await ye(e,be.F_OK)}catch{await G(e,`# SkyLabs Project

## [ ] monitor_connection
- Monitor database connection status
- Alert on connection issues

## [ ] database_schema
- Monitor database schema changes
- Apply migrations when needed`,"utf-8")}}catch(e){console.error("Failed to update TODO.md:",e)}}import{Pool as Te}from"pg";var C=class o{constructor(){this.pool=null;this.client=null;this.isMonitoring=!1;this.retryCount=0;this.MAX_RETRIES=5;this.HEALTH_CHECK_INTERVAL=3e5;this.healthCheckInterval=null}static getInstance(){return o.instance||(o.instance=new o),o.instance}getConfig(){return{user:"skylabs",host:"localhost",database:"skylabs_dev",password:"Fkhouch8",port:5432,ssl:!1}}async connect(){if(this.client)return this.client;let t=this.getConfig();this.pool=new Te({...t,max:1,idleTimeoutMillis:3e4,connectionTimeoutMillis:5e3}),this.pool.on("error",e=>{console.error("Unexpected error on idle client",e),this.handleError(e).catch(r=>{let a=r instanceof Error?r.message:"Unknown error in pool error handler";console.error("\u274C Error in pool error handler:",a)})});try{if(!this.pool)throw new Error("Database pool is not initialized");return this.client=await this.pool.connect(),console.log("\u2705 Database monitor connected"),this.client}catch(e){let r=e instanceof Error?e.message:"Unknown error connecting to database";throw console.error("\u274C Failed to connect to database:",r),e}}async startMonitoring(){if(this.isMonitoring){console.log("\u{1F50D} Database monitoring is already active");return}try{await this.connect(),this.isMonitoring=!0,this.retryCount=0,console.log("\u{1F680} Starting database monitoring..."),await this.checkHealth(),this.healthCheckInterval=setInterval(()=>{this.checkHealth().catch(t=>{let e=t instanceof Error?t.message:"Unknown error in health check";console.error("\u274C Error in scheduled health check:",e)})},this.HEALTH_CHECK_INTERVAL),console.log("\u2705 Database monitoring started")}catch(t){this.isMonitoring=!1;let e=t instanceof Error?t.message:"Unknown error starting monitoring";throw console.error("\u274C Failed to start database monitoring:",e),await this.handleError(t),t}}async checkHealth(){try{if((await(await this.connect()).query("SELECT 1 as health_check")).rows[0]?.health_check===1)this.retryCount=0,console.log("\u2705 Database health check passed"),await this.updateTaskStatus("monitor_connection","\u{1F7E2} Healthy");else throw new Error("Unexpected health check result")}catch(t){let e=t instanceof Error?t.message:"Unknown error during health check";console.error("\u274C Database health check failed:",e),await this.handleError(t)}}async handleError(t){this.retryCount++;let e=t instanceof Error?t.message:"Unknown error",r=t&&typeof t=="object"&&"code"in t?String(t.code):"UNKNOWN";if(await b(e,"Database Connection Error","Database","\u{1F534} Critical",{retryCount:this.retryCount,maxRetries:this.MAX_RETRIES,errorCode:r,timestamp:new Date().toISOString()},"db_connection_error"),await this.updateTaskStatus("monitor_connection","\u{1F534} Critical"),this.retryCount>this.MAX_RETRIES){console.error(`\u274C Max retries (${this.MAX_RETRIES}) reached. Stopping monitoring.`),await this.stopMonitoring();return}console.log(`\u{1F504} Retrying connection (${this.retryCount}/${this.MAX_RETRIES})...`);let a=Math.min(1e3*Math.pow(2,this.retryCount),3e4);await new Promise(s=>setTimeout(s,a));try{await this.connect(),this.retryCount=0,console.log("\u2705 Successfully reconnected to database"),await this.updateTaskStatus("monitor_connection","\u{1F7E2} Healthy")}catch(s){console.error("Failed to reconnect:",s)}}async stopMonitoring(){this.healthCheckInterval&&(clearInterval(this.healthCheckInterval),this.healthCheckInterval=null),this.isMonitoring=!1;try{this.client&&(this.client.release(),this.client=null),this.pool&&(await this.pool.end(),this.pool=null),console.log("\u2705 Database monitoring stopped"),await this.updateTaskStatus("monitor_connection","\u{1F7E0} Paused")}catch(t){throw console.error("Error stopping database monitoring:",t),t}}async getDatabaseStats(){let t=await this.connect();try{let e=await t.query("SELECT pg_size_pretty(pg_database_size(current_database())) as size"),r=await t.query("SELECT count(*) as active_connections FROM pg_stat_activity WHERE datname = current_database()"),a=await t.query(`
        SELECT 
          table_name,
          pg_size_pretty(pg_total_relation_size(quote_ident(table_name))) as size,
          pg_stat_get_live_tuples(table_name::regclass) as row_count
        FROM information_schema.tables
        WHERE table_schema = 'public'
        ORDER BY pg_total_relation_size(quote_ident(table_name)) DESC
      `);if(!e.rows[0]||!r.rows[0])throw new Error("Failed to retrieve database statistics");return{databaseSize:e.rows[0].size,activeConnections:parseInt(r.rows[0].active_connections,10),tables:a.rows}}catch(e){let r=e instanceof Error?e.message:"Unknown error getting database stats";throw console.error("\u274C Error getting database stats:",r),e}finally{t.release()}}async updateTaskStatus(t,e){try{console.log(`[TODO] Would update task ${t} with status: ${e}`)}catch(r){console.error("Error updating task status:",r)}}},w=C.getInstance();async function xe(){try{await L(),await w.startMonitoring();let o=await w.getDatabaseStats();console.log(`\u2705 Database monitoring initialized. Size: ${o.databaseSize}, Active connections: ${o.activeConnections}`)}catch(o){await b(o,"Application Initialization","System","\u{1F534} Critical",{action:"Failed to initialize application services"},"monitor_connection"),console.error("\u274C Failed to initialize application. Check ERROR_LOG.md for details."),process.exit(1)}}xe();var u=T();u.use(Re({contentSecurityPolicy:{directives:{defaultSrc:["'self'"],scriptSrc:["'self'","'unsafe-inline'"],styleSrc:["'self'","'unsafe-inline'"],imgSrc:["'self'","data:","https: http:"],connectSrc:["'self'",process.env.CORS_ORIGIN||"http://localhost:3000"]}},crossOriginEmbedderPolicy:!1}));var Ie=ke({windowMs:parseInt(process.env.RATE_LIMIT_WINDOW_MS||"900000",10),max:parseInt(process.env.RATE_LIMIT_MAX||"100",10),message:"Too many requests from this IP, please try again later"});u.use(Ie);u.use(De({origin:process.env.CORS_ORIGIN||"http://localhost:3000",methods:["GET","POST","PUT","DELETE","OPTIONS"],allowedHeaders:["Content-Type","Authorization"],credentials:!0}));u.use(T.json({limit:"10kb"}));u.use(T.urlencoded({extended:!0,limit:"10kb"}));u.use((o,t,e)=>{let r=Date.now(),a=o.path,s,c=t.json;t.json=function(l,...i){return s=l,c.apply(t,[l,...i])},t.on("finish",()=>{let l=Date.now()-r;if(a.startsWith("/api")){let i=`${o.method} ${a} ${t.statusCode} in ${l}ms`;s&&(i+=` :: ${JSON.stringify(s)}`),i.length>80&&(i=i.slice(0,79)+"\u2026"),H(i)}}),e()});(async()=>{let o=await F(u);u.use((e,r,a,s)=>{console.error("Error stack:",e.stack),console.error("Error details:",{message:e.message,name:e.name,...e.details&&{details:e.details},...e.code&&{code:e.code},...e.constraint&&{constraint:e.constraint}});let c="status"in e&&typeof e.status=="number"?e.status:500,l=e.message||"Internal Server Error",i="category"in e?e.category:"server",m="severity"in e?e.severity:c>=500?"\u{1F534} Critical":"\u{1F7E0} Major";b(e,`HTTP ${c}: ${r.method} ${r.path}`,i,m).catch(console.error);let f=process.env.NODE_ENV==="production"&&c>=500?{error:"Internal Server Error",statusCode:500}:{error:l,statusCode:c,...process.env.NODE_ENV!=="production"&&{stack:e.stack},..."details"in e&&{details:e.details}};a.status(c).json(f)}),u.get("env")==="development"?await B(u,o):V(u);let t=process.env.PORT?parseInt(process.env.PORT):3001;o.listen(t,"0.0.0.0",()=>{console.log(`\u{1F680} Server running at http://localhost:${t}`),w.startMonitoring().catch(e=>{console.error("\u274C Failed to start database monitoring:",e)})}),o.on("error",e=>{e.code==="EADDRINUSE"?console.error(`\u274C Port ${t} is already in use. Please check for other running instances.`):console.error("\u274C Server error:",e),process.exit(1)})})();
