var se=Object.defineProperty;var ne=(o,e)=>{for(var t in e)se(o,t,{get:e[t],enumerable:!0})};import S from"express";import oe from"cors";import qe from"helmet";import Be from"express-rate-limit";import{createServer as be}from"http";import{Router as he}from"express";import{z as f}from"zod";import{validateRequest as fe}from"zod-express-middleware";import ye from"express-rate-limit";import"dotenv/config";import{drizzle as ue}from"drizzle-orm/node-postgres";import{Pool as me}from"pg";var _={};ne(_,{contacts:()=>$,insertContactSchema:()=>ce,insertUserSchema:()=>ie,users:()=>N});import{sql as A}from"drizzle-orm";import{pgTable as P,text as h,varchar as x,timestamp as ae}from"drizzle-orm/pg-core";import{createInsertSchema as k}from"drizzle-zod";var N=P("users",{id:x("id").primaryKey().default(A`gen_random_uuid()`),username:h("username").notNull().unique(),password:h("password").notNull()}),$=P("contacts",{id:x("id").primaryKey().default(A`gen_random_uuid()`),name:h("name").notNull(),email:h("email").notNull(),phone:h("phone"),message:h("message").notNull(),createdAt:ae("created_at").defaultNow().notNull()}),ie=k(N).pick({username:!0,password:!0}),ce=k($).omit({id:!0,createdAt:!0});import"dotenv/config";function le(o){if(!o)throw new Error("DATABASE_URL environment variable is not set");try{let e=new URL(o.replace(/^postgres:/,"postgresql:"));return{user:decodeURIComponent(e.username||""),password:decodeURIComponent(e.password||""),host:e.hostname||"localhost",port:parseInt(e.port,10)||5432,database:e.pathname.replace(/^\//,""),ssl:process.env.NODE_ENV==="production"?{rejectUnauthorized:!1}:!1,max:10,connectionTimeoutMillis:1e4,idleTimeoutMillis:3e4}}catch(e){throw console.error("Error parsing DATABASE_URL:",e),new Error("Invalid DATABASE_URL format. Expected format: postgresql://username:password@host:port/database")}}function pe(){return process.env.DB_HOST||process.env.DB_USER||process.env.DB_PASSWORD||process.env.DB_NAME?(console.log("Using individual database configuration from environment variables"),{user:process.env.DB_USER||"postgres",password:process.env.DB_PASSWORD||"",host:process.env.DB_HOST||"localhost",port:parseInt(process.env.DB_PORT||"5432",10),database:process.env.DB_NAME||"skylabs_dev",ssl:!1,max:10,connectionTimeoutMillis:1e4,idleTimeoutMillis:3e4}):process.env.DATABASE_URL?(console.log("Using DATABASE_URL for database configuration"),le(process.env.DATABASE_URL)):(console.log("Using default database configuration"),{user:"postgres",password:"",host:"localhost",port:5432,database:"skylabs_dev",ssl:!1,max:10,connectionTimeoutMillis:1e4,idleTimeoutMillis:3e4})}var E=pe();console.log("\u{1F4CB} Database Configuration:",{...E,password:E.password?"***":"(no password)",ssl:E.ssl?"enabled":"disabled"});var M=E;import{promises as I}from"fs";import L from"path";async function b(o,e="",t="Database",r="\u{1F534} Critical",n={},s){let a=new Date().toISOString(),l=de(o),i=`### ${a} - ${e}

- **Category:** ${t}
- **Severity:** ${r}
- **Error Message:** \`${o.message}\`
- **Fix Suggestion:** ${l}
- **Status:** \u{1F504} Pending
- **Stack Trace:** \`\`\`
${o.stack||"No stack trace available"}\`\`\`
- **Metadata:** \`\`\`json
${JSON.stringify(n,null,2)}\`\`\`
${s?`- **Linked Task:** [${s}](${L.join(process.cwd(),"TODO.md")}#${s.toLowerCase().replace(/\s+/g,"-")})
`:""}---
`;try{let p=L.join(process.cwd(),"ERROR_LOG.md"),y=await I.readFile(p,"utf-8").catch(()=>"");await I.writeFile(p,i+y)}catch(p){console.error("\u274C Failed to write to error log:",p)}process.env.NODE_ENV!=="production"&&(console.error(`[${r}] ${t}: ${o.message}`),Object.keys(n).length>0&&console.error("Metadata:",n))}var c={...M,maxRetries:5,retryDelay:5e3};function de(o){return o.message.includes("DATABASE_URL")?"Check if .env file exists and contains a valid DATABASE_URL. See .env.example for format.":o.message.includes("connection refused")?"Verify PostgreSQL is running and accessible. Check host, port, and credentials.":"Check database configuration and network connectivity."}async function ge(){if(!c.user||!c.password||!c.database)throw new Error("Database configuration is incomplete. Check your .env file");let o=null,e=0,t=c.maxRetries,r=c.retryDelay;for(;e<t;){e++;try{console.log(`\u{1F50C} Connecting to database (attempt ${e}/${t})...`),console.log(`Connecting to: postgresql://${c.user}@${c.host}:${c.port}/${c.database}`);let s=new me({user:c.user,password:c.password,host:c.host,port:c.port,database:c.database,ssl:c.ssl||!1,max:c.maxConnections,idleTimeoutMillis:2e4,connectionTimeoutMillis:c.connectionTimeout,application_name:"skylabs-api"}),a=await s.connect();try{await a.query("SELECT 1"),console.log("\u2705 Database connection successful")}finally{a.release()}return{db:ue(s,{schema:_}),pool:s}}catch(s){let a=s;if(o=a,console.error(`\u274C Database connection failed (attempt ${e}/${t}):`,a.message),await b(a,"Database Connection Failed","Database","\u{1F534} Critical",{attempt:e,maxAttempts:t,host:c.host,port:c.port,database:c.database,user:c.user,hasPassword:!!c.password,errorCode:s.code},"db_connection"),e>=t){let p={message:`Failed to connect to database after ${t} attempts`,originalError:a.message,errorCode:s.code,connectionDetails:{host:c.host,port:c.port,database:c.database,user:c.user},suggestion:"Check if PostgreSQL is running and the credentials are correct."};throw console.error("Connection details:",JSON.stringify(p,null,2)),new Error(JSON.stringify(p,null,2))}let l=Math.random()*.5+.75,i=Math.min(r*Math.pow(2,e-1)*l,3e4);console.log(`\u23F3 Retrying in ${Math.round(i)}ms...`),await new Promise(p=>setTimeout(p,i))}}let n=`Failed to connect to database after ${c.maxRetries} attempts: ${o?.message}`;throw console.error(`\u274C ${n}`),await b(new Error(n),"Database Connection Failed","Database","\u{1F534} Critical",{maxRetries:c.maxRetries,lastError:o?.message,errorCode:o?.code,stack:o?.stack},"db_connection_failed"),new Error(n)}var d=null,m=null,C=!1,U=null;async function R(){if(C&&d&&m)return{db:d,pool:m};U&&console.warn("\u26A0\uFE0F Database initialization previously failed, retrying...");try{m&&(await m.end(),m=null,d=null),console.log("\u{1F50C} Initializing database connection...");let o=await ge();return d=o.db,m=o.pool,C=!0,U=null,m.on("error",e=>{console.error("\u274C Unexpected error on idle client",e),b(e,"Database Connection Error","Database","\u{1F534} Critical",{timestamp:new Date().toISOString()},"db_connection_error")}),console.log("\u{1F517} Database connection pool ready"),console.log("\u2705 Database connection initialized successfully"),{db:d,pool:m}}catch(o){let e=o instanceof Error?o:new Error(String(o));throw console.error("\u274C Error during database initialization:",e),await b(e,"Database initialization","Database","\u{1F534} Critical",{timestamp:new Date().toISOString()},"db_initialization_error"),e}}async function z(){try{return m||(console.log("\u{1F504} Database pool not initialized, initializing..."),(await R()).pool)}catch(o){let e=o instanceof Error?o:new Error(String(o));throw console.error("\u274C Failed to get database connection:",e.message),new Error(`Failed to get database connection: ${e.message}`)}}var H=async()=>{console.log("\u{1F6D1} Received shutdown signal. Closing database connections..."),m&&(await m.end(),m=null,d=null,C=!1)};process.on("SIGTERM",()=>{H().then(()=>process.exit(0))});process.on("SIGINT",()=>{H().then(()=>process.exit(0))});var we=f.object({name:f.string().min(2,"Name must be at least 2 characters"),email:f.string().email("Please enter a valid email"),phone:f.string().optional(),message:f.string().min(10,"Message must be at least 10 characters"),website:f.string().optional()}),j=he(),Ee=ye({windowMs:60*1e3,max:process.env.NODE_ENV==="test"?100:5,standardHeaders:!0,legacyHeaders:!1,message:{success:!1,error:"Too many requests, please try again later."}}),F=await z();j.post("/",Ee,fe({body:we}),async(o,e)=>{if(!F)return console.error("Database connection pool is not available"),e.status(503).json({success:!1,message:"Service temporarily unavailable. Please try again later."});let t=await F.connect().catch(r=>(console.error("Failed to get database client:",r),null));if(!t)return e.status(500).json({success:!1,message:"Failed to connect to the database. Please try again later."});try{let{name:r,email:n,phone:s,message:a,website:l}=o.body;if(l&&l.trim().length>0)return console.log("Spam detected - honeypot field filled"),e.status(200).json({success:!0,message:"Thank you for your message!"});await t.query("BEGIN");let i=await t.query("INSERT INTO contacts (name, email, phone, message, created_at) VALUES ($1, $2, $3, $4, NOW()) RETURNING *",[r,n,s||null,a]);await t.query("COMMIT");let p=i.rows[0];return e.status(201).json({success:!0,data:p,message:"Your message has been sent successfully!"})}catch(r){return await t.query("ROLLBACK"),console.error("Error submitting contact form:",r),r instanceof Error&&r.message.includes("duplicate key value")?e.status(400).json({success:!1,error:"A message with these details already exists"}):e.status(500).json({success:!1,error:"Failed to submit contact form. Please try again later."})}finally{t.release()}});var q=j;async function B(o){return o.use((t,r,n)=>{let s=process.env.NODE_ENV==="production"?["https://skylabs.tech","https://skylabs-1.onrender.com"]:["http://localhost:3001","http://localhost:5173"],a=t.headers.origin;if(a&&s.includes(a)&&r.header("Access-Control-Allow-Origin",a),r.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),r.header("Access-Control-Allow-Headers","Content-Type, Authorization, X-Requested-With"),r.header("Access-Control-Allow-Credentials","true"),t.method==="OPTIONS")return r.status(200).end();n()}),o.use("/api/contact",q),o.get("/api/contacts",async(t,r)=>{try{if(!d)throw new Error("Database connection not available");let n=await d.query.contacts.findMany();r.json(n)}catch(n){console.error("Get contacts error:",n),r.status(500).json({success:!1,message:"Failed to retrieve contacts."})}}),be(o)}import Ce from"express";import G from"fs";import T from"path";import{createServer as Re,createLogger as Te}from"vite";import{defineConfig as ve}from"vite";import Se from"@vitejs/plugin-react";import w from"path";import _e from"@replit/vite-plugin-runtime-error-modal";var V=ve({plugins:[Se(),_e(),...process.env.NODE_ENV!=="production"&&process.env.REPL_ID!==void 0?[await import("@replit/vite-plugin-cartographer").then(o=>o.cartographer())]:[]],define:{"import.meta.env.VITE_NEXT_PUBLIC_RECAPTCHA_SITE_KEY":JSON.stringify(process.env.VITE_NEXT_PUBLIC_RECAPTCHA_SITE_KEY||"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"),"import.meta.env.VITE_NEXT_PUBLIC_CONTACT_EMAIL":JSON.stringify(process.env.VITE_NEXT_PUBLIC_CONTACT_EMAIL||"contact@skylabs.dev")},server:{hmr:{overlay:!1},watch:{usePolling:!0},fs:{strict:!0,deny:["**/.*"]}},resolve:{alias:{"@":w.resolve(import.meta.dirname,"client","src"),"@shared":w.resolve(import.meta.dirname,"shared"),"@assets":w.resolve(import.meta.dirname,"attached_assets")}},root:w.resolve(import.meta.dirname,"client"),build:{outDir:w.resolve(import.meta.dirname,"dist/public"),emptyOutDir:!0}});import{nanoid as De}from"nanoid";var X=Te();function J(o,e="express"){let t=new Date().toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0});console.log(`${t} [${e}] ${o}`)}async function W(o,e){let t={middlewareMode:!0,hmr:{server:e},allowedHosts:!0},r=await Re({...V,configFile:!1,customLogger:{...X,error:(n,s)=>{X.error(n,s),process.exit(1)}},server:t,appType:"custom"});o.use(r.middlewares),o.use("*",async(n,s,a)=>{let l=n.originalUrl;try{let i=T.resolve(import.meta.dirname,"..","client","index.html"),p=await G.promises.readFile(i,"utf-8");p=p.replace('src="/src/main.tsx"',`src="/src/main.tsx?v=${De()}"`);let y=await r.transformIndexHtml(l,p);s.status(200).set({"Content-Type":"text/html"}).end(y)}catch(i){r.ssrFixStacktrace(i),a(i)}})}function K(o){let e=T.resolve(import.meta.dirname,"public");if(!G.existsSync(e))throw new Error(`Could not find the build directory: ${e}, make sure to build the client first`);o.use(Ce.static(e)),o.use("*",(t,r)=>{r.sendFile(T.resolve(e,"index.html"))})}import{writeFile as Y,access as Oe,constants as Ae}from"fs/promises";import{join as Q,dirname as Pe}from"path";import{fileURLToPath as xe}from"url";import{format as ke}from"date-fns";var Ne=xe(import.meta.url),$e=Pe(Ne);async function g(o,e="Application",t="General",r="\u{1F534} Critical",n={},s){try{let a=new Date,l=`err-${a.getTime()}-${Math.random().toString(36).substr(2,5)}`,i={id:l,timestamp:a.toISOString(),category:t,severity:r,context:e,message:typeof o=="string"?o:o.message,...typeof o!="string"&&o.stack?{stack:o.stack}:{},...s?{taskId:s}:{},...n?{metadata:n}:{}},p=`
## ${r} ${t} Error (${ke(a,"yyyy-MM-dd HH:mm:ss")})
**ID:** \`${l}\`  
**Context:** ${e}  
**Task:** ${s?`[#${s}](./TODO.md#${s})`:"N/A"}

### Details
\`\`\`json
${JSON.stringify({message:i.message,...i.metadata?{metadata:i.metadata}:{}},null,2)}
\`\`\`

${i.stack?`### Stack Trace
\`\`\`
${i.stack}
\`\`\`
`:""}
---
`;return await Y(Q($e,"..","..","ERROR_LOG.md"),p,{flag:"a"}),s&&await Me(s,i),l}catch(a){return console.error("Failed to write to error log:",a),"error-log-failed"}}async function Me(o,e){try{let t=Q(process.cwd(),"TODO.md");console.log(`[TODO] Would update task ${o} with status: ${e.severity||"info"}`);try{await Oe(t,Ae.F_OK)}catch{await Y(t,`# SkyLabs Project

## [ ] monitor_connection
- Monitor database connection status
- Alert on connection issues

## [ ] database_schema
- Monitor database schema changes
- Apply migrations when needed`,"utf-8")}}catch(t){console.error("Failed to update TODO.md:",t)}}import{Pool as Ie}from"pg";var D=class o{constructor(){this.pool=null;this.client=null;this.isMonitoring=!1;this.retryCount=0;this.MAX_RETRIES=5;this.HEALTH_CHECK_INTERVAL=3e5;this.healthCheckInterval=null}static getInstance(){return o.instance||(o.instance=new o),o.instance}getConfig(){return{user:"skylabs",host:"localhost",database:"skylabs_dev",password:"Fkhouch8",port:5432,ssl:!1}}async connect(){if(this.client)return this.client;let e=this.getConfig();this.pool=new Ie({...e,max:1,idleTimeoutMillis:3e4,connectionTimeoutMillis:5e3}),this.pool.on("error",t=>{console.error("Unexpected error on idle client",t),this.handleError(t).catch(r=>{let n=r instanceof Error?r.message:"Unknown error in pool error handler";console.error("\u274C Error in pool error handler:",n)})});try{if(!this.pool)throw new Error("Database pool is not initialized");return this.client=await this.pool.connect(),console.log("\u2705 Database monitor connected"),this.client}catch(t){let r=t instanceof Error?t.message:"Unknown error connecting to database";throw console.error("\u274C Failed to connect to database:",r),t}}async startMonitoring(){if(this.isMonitoring){console.log("\u{1F50D} Database monitoring is already active");return}try{await this.connect(),this.isMonitoring=!0,this.retryCount=0,console.log("\u{1F680} Starting database monitoring..."),await this.checkHealth(),this.healthCheckInterval=setInterval(()=>{this.checkHealth().catch(e=>{let t=e instanceof Error?e.message:"Unknown error in health check";console.error("\u274C Error in scheduled health check:",t)})},this.HEALTH_CHECK_INTERVAL),console.log("\u2705 Database monitoring started")}catch(e){this.isMonitoring=!1;let t=e instanceof Error?e.message:"Unknown error starting monitoring";throw console.error("\u274C Failed to start database monitoring:",t),await this.handleError(e),e}}async checkHealth(){try{if((await(await this.connect()).query("SELECT 1 as health_check")).rows[0]?.health_check===1)this.retryCount=0,console.log("\u2705 Database health check passed"),await this.updateTaskStatus("monitor_connection","\u{1F7E2} Healthy");else throw new Error("Unexpected health check result")}catch(e){let t=e instanceof Error?e.message:"Unknown error during health check";console.error("\u274C Database health check failed:",t),await this.handleError(e)}}async handleError(e){this.retryCount++;let t=e instanceof Error?e.message:"Unknown error",r=e&&typeof e=="object"&&"code"in e?String(e.code):"UNKNOWN";if(await g(t,"Database Connection Error","Database","\u{1F534} Critical",{retryCount:this.retryCount,maxRetries:this.MAX_RETRIES,errorCode:r,timestamp:new Date().toISOString()},"db_connection_error"),await this.updateTaskStatus("monitor_connection","\u{1F534} Critical"),this.retryCount>this.MAX_RETRIES){console.error(`\u274C Max retries (${this.MAX_RETRIES}) reached. Stopping monitoring.`),await this.stopMonitoring();return}console.log(`\u{1F504} Retrying connection (${this.retryCount}/${this.MAX_RETRIES})...`);let n=Math.min(1e3*Math.pow(2,this.retryCount),3e4);await new Promise(s=>setTimeout(s,n));try{await this.connect(),this.retryCount=0,console.log("\u2705 Successfully reconnected to database"),await this.updateTaskStatus("monitor_connection","\u{1F7E2} Healthy")}catch(s){console.error("Failed to reconnect:",s)}}async stopMonitoring(){this.healthCheckInterval&&(clearInterval(this.healthCheckInterval),this.healthCheckInterval=null),this.isMonitoring=!1;try{this.client&&(this.client.release(),this.client=null),this.pool&&(await this.pool.end(),this.pool=null),console.log("\u2705 Database monitoring stopped"),await this.updateTaskStatus("monitor_connection","\u{1F7E0} Paused")}catch(e){throw console.error("Error stopping database monitoring:",e),e}}async getDatabaseStats(){let e=await this.connect();try{let t=await e.query("SELECT pg_size_pretty(pg_database_size(current_database())) as size"),r=await e.query("SELECT count(*) as active_connections FROM pg_stat_activity WHERE datname = current_database()"),n=await e.query(`
        SELECT 
          table_name,
          pg_size_pretty(pg_total_relation_size(quote_ident(table_name))) as size,
          pg_stat_get_live_tuples(table_name::regclass) as row_count
        FROM information_schema.tables
        WHERE table_schema = 'public'
        ORDER BY pg_total_relation_size(quote_ident(table_name)) DESC
      `);if(!t.rows[0]||!r.rows[0])throw new Error("Failed to retrieve database statistics");return{databaseSize:t.rows[0].size,activeConnections:parseInt(r.rows[0].active_connections,10),tables:n.rows}}catch(t){let r=t instanceof Error?t.message:"Unknown error getting database stats";throw console.error("\u274C Error getting database stats:",r),t}finally{e.release()}}async updateTaskStatus(e,t){try{console.log(`[TODO] Would update task ${e} with status: ${t}`)}catch(r){console.error("Error updating task status:",r)}}},v=D.getInstance();import Le,{ipKeyGenerator as Ue}from"express-rate-limit";import ze from"helmet";import{config as He}from"dotenv";import{randomBytes as Fe}from"crypto";He();var Ft=Le({windowMs:600*1e3,max:5,message:{success:!1,error:"Too many login attempts. Please try again after 10 minutes."},standardHeaders:!0,legacyHeaders:!1,keyGenerator:o=>{let e=o.ip?Ue(o.ip):"unknown-ip",t=o.headers["user-agent"]||"no-user-agent";return`${e}_${t}`},validate:{trustProxy:!1},handler:(o,e)=>{e.status(429).json({success:!1,error:"Too many login attempts. Please try again later."})}}),Z=[ze(),(o,e,t)=>{e.setHeader("X-Content-Type-Options","nosniff"),e.setHeader("X-Frame-Options","DENY"),e.setHeader("X-XSS-Protection","1; mode=block"),e.setHeader("Referrer-Policy","strict-origin-when-cross-origin"),e.setHeader("Permissions-Policy","camera=(), microphone=(), geolocation=(), fullscreen=(self)"),o.secure&&e.setHeader("Strict-Transport-Security","max-age=31536000; includeSubDomains; preload");let r=Fe(16).toString("base64");e.locals.cspNonce=r;let n=["default-src 'self'",`script-src 'self' 'nonce-${r}' 'strict-dynamic' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://replit.com https://repl.it https://replit.com/ https://replit-public.nyc3.digitaloceanspaces.com https://unpkg.com 'unsafe-inline'`,`script-src-elem 'self' 'nonce-${r}' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ https://replit.com https://repl.it https://replit.com/ https://replit-public.nyc3.digitaloceanspaces.com https://unpkg.com 'unsafe-inline'`,"style-src 'self' 'unsafe-inline' 'unsafe-hashes' https://fonts.googleapis.com https://replit.com https://repl.it https://unpkg.com","style-src-elem 'self' 'unsafe-inline' https://fonts.googleapis.com https://replit.com https://repl.it https://unpkg.com","img-src 'self' data: blob: https: http:","font-src 'self' https://fonts.gstatic.com https://fonts.googleapis.com data: blob:",`connect-src 'self' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/ ws: wss: https://replit.com https://repl.it http://localhost:3001 http://127.0.0.1:3001 http://localhost:5173 http://127.0.0.1:5173 http://localhost:${process.env.PORT||3002} http://127.0.0.1:${process.env.PORT||3002} ${process.env.API_BASE_URL||"http://localhost:3001"}`,"frame-src 'self' https://www.google.com/recaptcha/ https://replit.com https://repl.it","prefetch-src 'self' https://fonts.gstatic.com","manifest-src 'self'","worker-src 'self' blob:","object-src 'none'","base-uri 'self'","form-action 'self'","frame-ancestors 'self'","upgrade-insecure-requests","media-src 'self' https: blob: data:"];process.env.CSP_REPORT_URI&&(n.push(`report-uri ${process.env.CSP_REPORT_URI}`),n.push("report-to csp-endpoint"));let s=n.join("; ");e.setHeader("Content-Security-Policy",s),(process.env.NODE_ENV!=="production"||process.env.CSP_REPORT_URI)&&e.setHeader("Report-To",JSON.stringify({group:"csp-endpoint",max_age:10886400,endpoints:[{url:process.env.CSP_REPORT_URI||"/csp-report"}],include_subdomains:!0})),t()}];import{Router as je}from"express";var ee=je();ee.post("/csp-report",async(o,e)=>{if(o.body&&o.body["csp-report"]){let t=o.body["csp-report"],r={documentUri:t["document-uri"],referrer:t.referrer,blockedUri:t["blocked-uri"],violatedDirective:t["violated-directive"],originalPolicy:t["original-policy"]};await g(new Error("CSP Violation Detected"),"CSP","Security","\u{1F7E0} Major",r)}e.status(204).end()});var te=ee;async function Ve(){try{await R(),await v.startMonitoring();let o=await v.getDatabaseStats();console.log(`\u2705 Database monitoring initialized. Size: ${o.databaseSize}, Active connections: ${o.activeConnections}`)}catch(o){await g(o,"Application Initialization","System","\u{1F534} Critical",{action:"Failed to initialize application services"},"monitor_connection"),console.error("\u274C Failed to initialize application. Check ERROR_LOG.md for details."),process.exit(1)}}Ve();var u=S(),O=["http://localhost:3001","http://127.0.0.1:3001","http://localhost:5173","http://127.0.0.1:5173","https://skylabs.tech","https://skylabs-1.onrender.com"];process.env.CORS_ORIGINS&&O.push(...process.env.CORS_ORIGINS.split(","));var re={origin:(o,e)=>{if(!o||process.env.NODE_ENV==="production"&&o.endsWith(".onrender.com")||O.includes(o)||process.env.NODE_ENV==="development")return e(null,!0);console.warn(`Blocked by CORS: ${o}`),e(new Error("Not allowed by CORS"))},credentials:!0,methods:["GET","POST","PUT","DELETE","OPTIONS","PATCH"],allowedHeaders:["Content-Type","Authorization","X-Requested-With","X-Content-Type-Options","Origin","Accept","Accept-Version","Content-Length","Content-MD5","Date","X-Api-Version"],exposedHeaders:["Content-Length","X-Content-Length","X-RateLimit-Limit","X-RateLimit-Remaining","X-RateLimit-Reset"],maxAge:86400,preflightContinue:!1,optionsSuccessStatus:204};u.use(oe(re));u.options("*",oe(re));u.use((o,e,t)=>{let r=o.headers.origin;r&&O.includes(r)&&(e.header("Access-Control-Allow-Origin",r),e.header("Access-Control-Allow-Credentials","true"),e.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),e.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, Authorization")),t()});u.use(Z);u.use("/csp-report",S.json({type:["json","application/csp-report"]}),te);u.use(qe({crossOriginEmbedderPolicy:!1,crossOriginOpenerPolicy:!1,crossOriginResourcePolicy:{policy:"cross-origin"},originAgentCluster:!0,referrerPolicy:{policy:"strict-origin-when-cross-origin"},strictTransportSecurity:process.env.NODE_ENV==="production"?{maxAge:31536e3,includeSubDomains:!0,preload:!0}:!1}));var Xe=Be({windowMs:900*1e3,max:process.env.NODE_ENV==="production"?100:1e3,message:JSON.stringify({success:!1,error:"Too many requests from this IP, please try again after 15 minutes"})});u.use("/api",Xe);u.use(S.json({limit:"10kb"}));u.use(S.urlencoded({extended:!0,limit:"10kb"}));u.use((o,e,t)=>{let r=Date.now(),n=o.path,s,a=e.json;e.json=function(l,...i){return s=l,a.apply(e,[l,...i])},e.on("finish",()=>{let l=Date.now()-r;if(n.startsWith("/api")){let i=`${o.method} ${n} ${e.statusCode} in ${l}ms`;s&&(i+=` :: ${JSON.stringify(s)}`),i.length>80&&(i=i.slice(0,79)+"\u2026"),J(i)}}),t()});(async()=>{let o=await B(u);u.use((t,r,n,s)=>{console.error("Error stack:",t.stack),console.error("Error details:",{message:t.message,name:t.name,...t.details&&{details:t.details},...t.code&&{code:t.code},...t.constraint&&{constraint:t.constraint}});let a="status"in t&&typeof t.status=="number"?t.status:500,l=t.message||"Internal Server Error",i="category"in t?t.category:"server",p="severity"in t?t.severity:a>=500?"\u{1F534} Critical":"\u{1F7E0} Major";g(t,`HTTP ${a}: ${r.method} ${r.path}`,i,p).catch(console.error);let y=process.env.NODE_ENV==="production"&&a>=500?{error:"Internal Server Error",statusCode:500}:{error:l,statusCode:a,...process.env.NODE_ENV!=="production"&&{stack:t.stack},..."details"in t&&{details:t.details}};n.status(a).json(y)}),u.get("env")==="development"?await W(u,o):K(u);let e=process.env.PORT?parseInt(process.env.PORT):3002;o.listen(e,"0.0.0.0",()=>{console.log(`\u{1F680} Server running at http://localhost:${e}`),v.startMonitoring().catch(t=>{console.error("\u274C Failed to start database monitoring:",t)})}),o.on("error",t=>{t.code==="EADDRINUSE"?console.error(`\u274C Port ${e} is already in use. Please check for other running instances.`):console.error("\u274C Server error:",t),process.exit(1)})})();
