apiVersion: v1
kind: Service
metadata:
  name: skylabs
  namespace: apps
  labels:
    app: skylabs
    tier: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: skylabs
    tier: backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: skylabs
  namespace: apps
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 10m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval';";
spec:
  tls:
  - hosts:
    - ${DOMAIN:-example.com}
    - www.${DOMAIN:-example.com}
    secretName: skylabs-tls
  rules:
  - host: ${DOMAIN:-example.com}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: skylabs
            port:
              name: http
  - host: www.${DOMAIN:-example.com}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: skylabs
            port:
              name: http
