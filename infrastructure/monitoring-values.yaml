# Prometheus configuration
prometheus:
  prometheusSpec:
    retention: 30d
    retentionSize: "50GiB"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: do-block-storage
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    
    # Configure Prometheus to monitor all namespaces
    podMonitorSelector: {}
    serviceMonitorSelector: {}
    
    # Configure Prometheus to scrape metrics from the application
    additionalScrapeConfigs:
      - job_name: 'skylabs-app'
        metrics_path: '/metrics'
        scheme: 'http'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['apps']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
            action: keep
            regex: skylabs
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http

# Grafana configuration
grafana:
  # Enable persistence for Grafana
  persistence:
    enabled: true
    size: 10Gi
    storageClassName: do-block-storage
  
  # Configure admin password from secret
  adminPassword: ${GRAFANA_ADMIN_PASSWORD}
  
  # Enable sidecar for dashboard auto-discovery
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
  
  # Add default dashboards
  dashboards:
    default:
      # Node Exporter Full
      node-exporter-full:
        gnetId: 1860
        revision: 1
        datasource: Prometheus
      
      # PostgreSQL
      postgresql:
        gnetId: 9628
        revision: 1
        datasource: Prometheus
      
      # Kubernetes Cluster
      kubernetes-cluster:
        gnetId: 315
        revision: 1
        datasource: Prometheus

# Alertmanager configuration
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
    receivers:
      - name: 'null'
      - name: 'slack'
        slack_configs:
          - send_resolved: true
            title: '{{ template "slack.title" . }}'
            text: '{{ template "slack.text" . }}'
            api_url: ${SLACK_WEBHOOK_URL}

# kube-state-metrics configuration
kubeStateMetrics:
  enabled: true

# node-exporter configuration
nodeExporter:
  enabled: true

# kubelet configuration
kubelet:
  enabled: true

# kube-controller-manager configuration
kubeControllerManager:
  enabled: true

# kube-scheduler configuration
kubeScheduler:
  enabled: true

# kubeProxy configuration
kubeProxy:
  enabled: true

# kubeEtcd configuration
kubeEtcd:
  enabled: true

# kube-state-metrics configuration
kubeStateMetrics:
  enabled: true

# prometheus-node-exporter configuration
prometheus-node-exporter:
  enabled: true

# prometheus-pushgateway configuration
prometheus-pushgateway:
  enabled: false

# prometheus-operator configuration
prometheusOperator:
  enabled: true
  tls:
    enabled: true
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true

# Configure persistent volumes for Prometheus
prometheus-node-exporter:
  hostRootFsMount: false
  hostNetwork: true
  hostPID: true
  podSecurityPolicy:
    enabled: true
  
  # Tolerations for node-exporter to run on all nodes
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists

# Configure resource limits
prometheus-node-exporter:
  resources:
    limits:
      cpu: 200m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 30Mi

# Configure service accounts and RBAC
serviceAccounts:
  create: true
  name: ""

rbac:
  create: true
  pspEnabled: true

# Configure network policies
networkPolicy:
  enabled: true
  allowExternal: false
  allowEgress: true
  extraIngress: []
  extraEgress: []
  ingress:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: grafana
  egress:
    - to:
      - ipBlock:
          cidr: 0.0.0.0/0
          except:
            - 169.254.169.254/32
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
