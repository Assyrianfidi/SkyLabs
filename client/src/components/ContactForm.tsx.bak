import React, { useState } from 'react';
import { toast } from 'react-hot-toast';
import { MapPin } from 'lucide-react';

type ContactFormData = {
  name: string;
  email: string;
  message: string;
};

const DEFAULT_FORM_STATE: ContactFormData = {
  name: '',
  email: '',
  message: '',
};

export default function ContactForm() {
  const [formData, setFormData] = useState<ContactFormData>(DEFAULT_FORM_STATE);
  const [errors, setErrors] = useState<Partial<ContactFormData>>({});
  const [isLoading, setIsLoading] = useState(false);

  const validateForm = (field: keyof ContactFormData, value: string) => {
    let error = '';
    if (field === 'name' && !value) error = 'Name is required';
    if (field === 'email' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) error = 'Invalid email';
    if (field === 'message' && value.length < 10) error = 'Message must be at least 10 characters';
    return error;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setErrors(prev => ({ ...prev, [name]: validateForm(name as keyof ContactFormData, value) }));
  };

  const handleBlur = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setErrors(prev => ({ ...prev, [name]: validateForm(name as keyof ContactFormData, value) }));
  };

  const resetForm = () => {
    setFormData(DEFAULT_FORM_STATE);
    setErrors({});
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors: Partial<ContactFormData> = {};
    Object.entries(formData).forEach(([key, value]) => {
      const err = validateForm(key as keyof ContactFormData, value);
      if (err) newErrors[key as keyof ContactFormData] = err;
    });
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    try {
      setIsLoading(true);
      await new Promise(res => setTimeout(res, 1200)); // simulate API
      toast.success('Message sent successfully!');
      resetForm();
    } catch {
      toast.error('Failed to send message. Try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-md mx-auto p-6 bg-white rounded-2xl shadow-md space-y-4">
      <h2 className="flex items-center text-xl font-semibold text-gray-800 gap-2">
        <MapPin className="w-5 h-5 text-blue-500" /> Contact Us
      </h2>

      {/* Name */}
      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">Name</label>
        <input
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
          onBlur={handleBlur}
          aria-invalid={!!errors.name}
          aria-describedby={errors.name ? 'name-error' : undefined}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-300"
        />
        {errors.name && <p id="name-error" className="mt-1 text-sm text-red-600">{errors.name}</p>}
      </div>
            value={formData.email}
            onChange={handleChange}
            onBlur={handleBlur}
            className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              errors.email ? 'border-red-500' : 'border-gray-300'
            }`}
            aria-invalid={errors.email ? 'true' : 'false'}
            aria-describedby={errors.email ? 'email-error' : undefined}
            data-testid="email-input"
          />
          {errors.email && (
            <p id="email-error" className="mt-1 text-sm text-red-600" data-testid="email-error">
              {errors.email}
            </p>
          )}
        </div>

        <div>
          <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
            Message <span className="text-red-500">*</span>
          </label>
          <textarea
            id="message"
            name="message"
            value={formData.message}
            onChange={handleChange}
            onBlur={handleBlur}
            rows={5}
            className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              errors.message ? 'border-red-500' : 'border-gray-300'
            }`}
            aria-invalid={errors.message ? 'true' : 'false'}
            aria-describedby={errors.message ? 'message-error' : undefined}
            data-testid="message-input"
          />
          <p className="mt-1 text-xs text-gray-500">Minimum 10 characters required</p>
          {errors.message && (
            <p id="message-error" className="mt-1 text-sm text-red-600" data-testid="message-error">
              {errors.message}
            </p>
          )}
        </div>

        <div>
          <button
            type="submit"
            disabled={isSubmitting || !isFormValid()}
            className={`w-full px-6 py-3 rounded-md text-white font-medium transition-colors ${
              isSubmitting || !isFormValid()
                ? 'bg-blue-400 cursor-not-allowed'
                : 'bg-blue-600 hover:bg-blue-700'
            }`}
            data-testid="submit-button"
          >
            {isSubmitting ? 'Sending...' : 'Send Message'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ContactForm;
